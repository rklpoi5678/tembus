
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  shortDescription: 'shortDescription',
  description: 'description',
  type: 'type',
  status: 'status',
  price: 'price',
  original_price: 'original_price',
  currency: 'currency',
  stock_quantity: 'stock_quantity',
  is_active: 'is_active',
  image_url: 'image_url',
  digital_file_url: 'digital_file_url',
  download_url: 'download_url',
  file_size: 'file_size',
  created_at: 'created_at',
  updated_at: 'updated_at',
  rating: 'rating',
  review_count: 'review_count',
  sales_count: 'sales_count',
  featured: 'featured',
  inventory: 'inventory',
  specifications: 'specifications',
  category_id: 'category_id',
  seller_id: 'seller_id',
  tags: 'tags'
};

exports.Prisma.AddressesScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code',
  country: 'country'
};

exports.Prisma.AnalyticsScalarFieldEnum = {
  id: 'id',
  total_sales: 'total_sales',
  total_orders: 'total_orders',
  total_products: 'total_products',
  total_users: 'total_users',
  revenue_growth: 'revenue_growth',
  order_growth: 'order_growth',
  top_products: 'top_products',
  sales_by_category: 'sales_by_category',
  sales_by_month: 'sales_by_month',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Cart_itemsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  product_id: 'product_id',
  quantity: 'quantity',
  created_at: 'created_at',
  price: 'price'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  slug: 'slug',
  parentId: 'parentId',
  product_count: 'product_count',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Order_itemsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  product_id: 'product_id',
  quantity: 'quantity',
  price: 'price',
  total: 'total'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  order_number: 'order_number',
  user_id: 'user_id',
  subtotal: 'subtotal',
  tax: 'tax',
  shipping: 'shipping',
  total: 'total',
  status: 'status',
  payment_status: 'payment_status',
  payment_method: 'payment_method',
  shipping_address_id: 'shipping_address_id',
  billing_address_id: 'billing_address_id',
  tracking_number: 'tracking_number',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Product_imagesScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  image_url: 'image_url',
  alt_text: 'alt_text',
  is_primary: 'is_primary',
  sort_order: 'sort_order',
  created_at: 'created_at'
};

exports.Prisma.ReviewsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  product_id: 'product_id',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  is_verified_purchase: 'is_verified_purchase',
  helpful_count: 'helpful_count',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_authScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  password_hash: 'password_hash',
  reset_token: 'reset_token',
  reset_token_expires: 'reset_token_expires',
  email_verified: 'email_verified',
  verification_token: 'verification_token',
  last_login: 'last_login',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_sessionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  session_token: 'session_token',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  avatar: 'avatar',
  verified: 'verified',
  address: 'address',
  phone: 'phone',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.SellersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  storeName: 'storeName',
  slug: 'slug',
  storeDescription: 'storeDescription',
  logo_url: 'logo_url',
  banner_url: 'banner_url',
  verified: 'verified',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WishlistsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  product_id: 'product_id',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ProductType = exports.$Enums.ProductType = {
  digital: 'digital',
  service: 'service',
  physical: 'physical'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  draft: 'draft',
  published: 'published',
  archived: 'archived'
};

exports.order_status = exports.$Enums.order_status = {
  pending: 'pending',
  processing: 'processing',
  shipped: 'shipped',
  delivered: 'delivered',
  cancelled: 'cancelled',
  refunded: 'refunded'
};

exports.payment_status = exports.$Enums.payment_status = {
  pending: 'pending',
  paid: 'paid',
  failed: 'failed',
  refunded: 'refunded'
};

exports.UserRole = exports.$Enums.UserRole = {
  buyer: 'buyer',
  seller: 'seller',
  admin: 'admin'
};

exports.SellerStatus = exports.$Enums.SellerStatus = {
  pending: 'pending',
  active: 'active',
  suspended: 'suspended',
  deactivated: 'deactivated'
};

exports.Prisma.ModelName = {
  Product: 'Product',
  addresses: 'addresses',
  analytics: 'analytics',
  cart_items: 'cart_items',
  categories: 'categories',
  order_items: 'order_items',
  orders: 'orders',
  product_images: 'product_images',
  reviews: 'reviews',
  user_auth: 'user_auth',
  user_sessions: 'user_sessions',
  users: 'users',
  sellers: 'sellers',
  wishlists: 'wishlists'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
